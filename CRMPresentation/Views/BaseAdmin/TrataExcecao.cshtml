@using Presentation.Extensions
@model ERP_Condominios_Solution.ViewModels.ExcecaoViewModel
@{
    Layout = "~/Views/Shared/_Layout_Admin.cshtml";
}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="page-title"> 
        <h3 class="title">Exceções</h3> 
        <br />
        <ol class="breadcrumb">
            <li class="active">
                <strong>Exceções - Visualização</strong>
            </li>
        </ol>
        <br />
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-xs-12">
            <div class="col-lg-12 col-md-12 col-xs-12 ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Exceções - Visualização</h5>
                </div>
                <div class="ibox-content">
                    <div class="form-group">
                        @Html.ButtonLinkIndex(text: "Reenviar E-Mail", action: "EnviarEMailSuporte", controller: "BaseAdmin")
                        @Html.ButtonLinkIndex(text: "Reenviar SMS", action: "EnviarSMSSuporte", controller: "BaseAdmin")
                        @if (Model.tipoVolta == 1)
                        {
                            @Html.ButtonLinkIndex(text: "Voltar", action: "Login", controller: "ControleAcesso")
                        }
                        else
                        {
                            @Html.ButtonLinkIndex(text: "Voltar", action: "CarregarBase", controller: "BaseAdmin")
                        }
                    </div>
                    <div class="tabs-container">
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#tab-1">Dados da Exceção</a></li>
                        </ul>
                        <div class="tab-content">
                            @*Dados Gerais*@
                            <div id="tab-1" class="tab-pane active">
                                <div class="panel-body">
                                    <div class="row" style="width: 100%;">
                                        <div class="col-lg-12 col-md-12 col-xs-12">
                                            <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                <div class="col-lg-2 col-md-2 col-xs-12">
                                                    Suporte Técnico (WhatsApp)
                                                    @Html.TextBoxFor(m => m.SuporteZap, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:red; font-weight:bold" })
                                                </div>
                                                <div class="col-lg-3 col-md-3 col-xs-12">
                                                    E-Mail
                                                    @Html.TextBoxFor(m => m.SuporteMail, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:red; font-weight:bold"  })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row" style="width: 100%;">
                                        <div class="col-lg-12 col-md-12 col-xs-12">
                                            <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                <div class="col-lg-3 col-md-2 col-xs-12">
                                                    Módulo Gerador da Exceção
                                                    @Html.TextBoxFor(m => m.Gerador, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:darkseagreen; font-weight:bold" })
                                                </div>
                                                <div class="col-lg-2 col-md-2 col-xs-12">
                                                    Data/Hora da Exceção
                                                    @Html.TextBoxFor(m => m.DataExcecao, "{0:dd/MM/yyyy HH:MM:ss}", new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:brown; font-weight:bold"  })
                                                </div>
                                                <div class="col-lg-7 col-md-7 col-xs-12">
                                                    Tipo de Exceção
                                                    @Html.TextBoxFor(m => m.tipoExcecao, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:goldenrod; font-weight:bold" })
                                                </div>                                            
                                            </div>
                                            <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                <div class="col-lg-12 col-md-12 col-xs-12">
                                                    Mensagem da Exceção
                                                    @Html.TextBoxFor(m => m.Message, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:green; font-weight:bold"  })
                                                </div>
                                            </div>
                                        </div>
                                        @if (Model.Inner != null)
                                        {
                                            <div class="col-lg-12 col-md-12 col-xs-12">
                                                <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                    <div class="col-lg-12 col-md-12 col-xs-12">
                                                        Exceção Embutida (Inner Exception)
                                                        @Html.TextAreaFor(m => m.Inner, new { @class = "form-control", style = "width: 100%; height: 200px;", autofocus = true, @readonly="readonly"})
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.Source != null)
                                        {
                                            <div class="col-lg-12 col-md-12 col-xs-12">
                                                <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                    <div class="col-lg-12 col-md-12 col-xs-12">
                                                        Origem (Source)
                                                        @Html.TextBoxFor(m => m.Source, new { @class = "form-control", autofocus = true, @readonly="readonly", @style = "color:brown; font-weight:bold"  })
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.StackTrace != null)
                                        {
                                            <div class="col-lg-12 col-md-12 col-xs-12">
                                                <div class="form-group" style=" margin-left: -15px; margin-right: -15px;">                
                                                    <div class="col-lg-12 col-md-12 col-xs-12">
                                                        Pilha de Execução (Stack Trace)
                                                        @Html.TextAreaFor(m => m.StackTrace, new { @class = "form-control", style = "width: 100%; height: 200px;", autofocus = true, @readonly="readonly"})
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
         </div>
    </div>
</div>

@section Styles {
    <link href="~/Content/themes/base/all.css" rel="stylesheet" />  
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/plugins/jasnyBootstrapStyles")
    @Styles.Render("~/plugins/toastrStyles")
}
@section Scripts {
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/bundles/inputmask")
    @Scripts.Render("~/plugins/jasnyBootstrap")
    @Scripts.Render("~/plugins/sparkline")
    @Scripts.Render("~/plugins/videoResponsible")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.maskedinput/1.4.1/jquery.maskedinput.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {

            var i = -1;
            var toastCount = 0;
            var $toastlast;
            var getMessage = function () {
                var msg = 'Hi, welcome to Inspinia. This is example of Toastr notification box.';
                return msg;
            };

            $('#basictoast').click(function () {
                // Display a success toast, with a title
                toastr.success('Envio em Andamento')
            });
            $('#showtoast').click(function () {
                var shortCutFunction = $("#toastTypeGroup input:radio:checked").val();
                var msg = $('#message').val();
                var title = $('#title').val() || '';
                var $showDuration = $('#showDuration');
                var $hideDuration = $('#hideDuration');
                var $timeOut = $('#timeOut');
                var $extendedTimeOut = $('#extendedTimeOut');
                var $showEasing = $('#showEasing');
                var $hideEasing = $('#hideEasing');
                var $showMethod = $('#showMethod');
                var $hideMethod = $('#hideMethod');
                var toastIndex = toastCount++;
                toastr.options = {
                    closeButton: $('#closeButton').prop('checked'),
                    debug: $('#debugInfo').prop('checked'),
                    progressBar: $('#progressBar').prop('checked'),
                    positionClass: $('#positionGroup input:radio:checked').val() || 'toast-top-right',
                    onclick: null
                };
                if ($('#addBehaviorOnToastClick').prop('checked')) {
                    toastr.options.onclick = function () {
                        alert('You can perform some custom action after a toast goes away');
                    };
                }
                if ($showDuration.val().length) {
                    toastr.options.showDuration = $showDuration.val();
                }
                if ($hideDuration.val().length) {
                    toastr.options.hideDuration = $hideDuration.val();
                }
                if ($timeOut.val().length) {
                    toastr.options.timeOut = $timeOut.val();
                }
                if ($extendedTimeOut.val().length) {
                    toastr.options.extendedTimeOut = $extendedTimeOut.val();
                }
                if ($showEasing.val().length) {
                    toastr.options.showEasing = $showEasing.val();
                }
                if ($hideEasing.val().length) {
                    toastr.options.hideEasing = $hideEasing.val();
                }
                if ($showMethod.val().length) {
                    toastr.options.showMethod = $showMethod.val();
                }
                if ($hideMethod.val().length) {
                    toastr.options.hideMethod = $hideMethod.val();
                }
                if (!msg) {
                    msg = getMessage();
                }
                $("#toastrOptions").text("Command: toastr["
                        + shortCutFunction
                        + "](\""
                        + msg
                        + (title ? "\", \"" + title : '')
                        + "\")\n\ntoastr.options = "
                        + JSON.stringify(toastr.options, null, 2)
                );
                var $toast = toastr[shortCutFunction](msg, title); // Wire up an event handler to a button in the toast, if it exists
                $toastlast = $toast;
                if ($toast.find('#okBtn').length) {
                    $toast.delegate('#okBtn', 'click', function () {
                        alert('you clicked me. i was toast #' + toastIndex + '. goodbye!');
                        $toast.remove();
                    });
                }
                if ($toast.find('#surpriseBtn').length) {
                    $toast.delegate('#surpriseBtn', 'click', function () {
                        alert('Surprise! you clicked me. i was toast #' + toastIndex + '. You could perform an action here.');
                    });
                }
            });
            function getLastToast() {
                return $toastlast;
            }
            $('#clearlasttoast').click(function () {
                toastr.clear(getLastToast());
            });
            $('#cleartoasts').click(function () {
                toastr.clear();
            });

        });
    </script>

    @if (ViewBag.Message != null)
    {
        <script type="text/javascript">
            window.onload = function () {
                  alert("@ViewBag.Message");
            };
        </script>
    }
}
